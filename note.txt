多任务并发---需要搭载操作系统

gcc 编译过程
    1、预处理   -E   xx.i
    2、编译    语法检查   -S   xx.S
    3、汇编    -c   xx.o
    4、链接    -lm(math.h)  xx
    
	
变量存储位置：	
	栈区stack	由编译器自动分配释放，存放函数的参数值，函数的返回地址，局部变量等，#栈区容量有限，不能溢出
	堆区heap	一般由程序员分配释放，比如malloc	//可以返回子函数中malloc分配的空间
	全局区（静态区，数据区，静态数据区，数据段）static 	全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，
							未初始化的全局变量和静态变量存放在另一块相邻的区域，程序结束后由系统释放。
	文字常量区	常量字符串，程序结束后由系统释放。
	程序代码区	存放函数体的二进制代码。

cd - 返回上一次路径
/proc
	正在运行的进程编号
	
touch 
	若文件不存在，则新建文件，否则更新时间戳

rm
	使用扩展通配符 
		shopt -s extglob 开启
		shopt -s 查看
	rm -rf * !(hello.c) 删除全部，除了hello.c
	
more 
	分页显示（回车键），只能向下
less
	使用方向键向上或向下
head
	head -10 xx  文件首10行
tail
	tail -5 xx    文件尾部5行
su
	切换用户，默认的参数为root
	
		 UID GID
double:x:500:500::/home/double:/bin/bash               // /etc/passwd
double:x:500:										   // /etc/group
		 GID
		 
adduser 
	-g 加入组 
	默认建立主目录
	
userdel 
	userdel xx [-rf]  删除用户xx[和其主目录]
usermod 
	usermod xx -g root	更改用户所属组

VIM
	命令模式、插入模式、末行模式
	命令模式：

		ctrl + f	向下翻页
		ctrl + b	向上翻页
		ctrl + u  	向上翻半页
		ctrl + d  	向下翻半页
		^ 	行首
		$	行尾
		w 以单词向下跳转
		b 以单词向上跳转
		e 跳转当前光标所在单词的最后一个字母

		1G	首行
		G	末行
		#G	跳转到#行
		J	合并两行
		dd	剪切当前光标行
            ndd n 为数字。剪切光标所在的行向下n行，例如 20dd 则是剪切 20行 (常用)
            d1G 剪切光标所在到第一行的所有数据
            dG  剪切光标所在到最后一行的所有数据
			dw	剪切当前光标所在单词
            d$  剪切游标所在处，到该行行尾的所有字符
            d0  剪切游标所在处 ，到该行行首的所有字符
		yy	复制
			nyw	当前光标所在单词后的n个单词
            yy  复制游标所在癿那一行(常用)
            y1G 复制光标所在列到第一列癿所有数据
            yG  复制光标所在列到最后一列癿所有数据
            y0  复制光标所在的那个字符到该行行首癿所有数据
            y$  复制光标所在的那个字符到该行行尾癿所有数据
		p	黏贴
		u	撤销 单步
		U	撤销 所有操作
		ctrl + r 相当于ctrl + y
		ctrl + ] 跳转函数位置  ctrl + t	返回跳转位置----先用ctags建立tag文件
		ctrl + n ctrl + p 显示补全列表--先用ctags建立tag文件
	末行模式：
		i	光标处插入
		o	在当前行下面插入新行，并进入插入模式
		O	在当前行上面插入新行，并进入插入模式
		:set nu
		:set nonu
		:w xx 另存为
		:set paste	设置粘贴
		:set nopaste	取消设置粘贴
		:nohl	清除/ ? 查找后的高亮着色
		
	打开二进制文件
		vim -b xx
			:%!xxd  十六进制查看
		
C语言
	assert(xx);//条件不满足，程序会异常退出，#include <assert.h>
	
	函数返回指针的几种方法：
		1、在函数内用malloc，由调用者释放
		2、在函数内使用static 定义
		3、由调用者分配空间，只是把指针传给函数，函数内部把数据拷贝到内存中。（推荐）
		
	函数指针
		返回值类型	(*指针变量名)([形参列表])
		
	文件
		fputc(ch,stdout);//输出到屏幕 

内核驱动开发
	1、内核核心
		进程管理
		内存管理
		文件管理
		网路管理
		设备管理
	2、驱动类型
		字符设备
			像字节流一样的存取设备
			通过/dev下文件系统节点访问
			至少要实现open,close,read,write等系统调用
			只能顺序访问的数据通道，不能前后移动指针
		块设备
			通过/dev下文件系统节点访问
			块设备有专门的接口，必须支持挂载mount文件系统
			块设备和字符设备的区别仅仅在于内核内部管理数据的方式
		网络设备
			通过单独的网络接口调用
	3、驱动程序加载到内核的方法
		直接编译进内核
		linux提供了 模块Module 的机制
			insmod	加载模块
			rmmod	卸载模块
			
			__init 限定加载时调用
			__exit	限定卸载时调用
	开发步骤
		基本步骤
			1、确定主设备号和次设备号
			2、实现字符驱动程序
				实现file_operations结构题
				实现初始化函数，注册字符设备
				实现销毁函数，释放字符设备
			3、创建设备文件节点

		主设备号是内核识别一个设备的标识
			整数（占12bits），范围从0到4095，通常使用1-255
		次设备号由内核使用，用于正确确定设备文件所指向的设备
			整数（占20bits），范围从0到1048575，通常使用1-255
		设备编号的内部表达
			dev_t类型(32位)
				用来保存设备编号 高12位为主设备号，低20位为次设备号
			从dev_t获得主次设备号
				MAJOR(dev_t)	主
				MINOR(dev_t)	次
			将主次设备号转换为dev_t类型
				MKDEV(int major,int minor);
		分配主设备号
			手动分配
				#include <linux/fs.h>
				int register_chrdev_region(dev_t first,unsigned int count,char *name)
			动态分配
				#include <linux/fs.h>
				int alloc_chrdev_region(dev_t *dev,unsigned int	firstminor,unsigned int count,char *name);
			释放设备号
				void unregister_chrdev_region(dev_t first,unsigned int count);
		实现字符驱动
			cdev结构体
				struct cdev
				{
					struct kobject kobj;	//内嵌的kobject对象
					struct module *owner;	//所属模块
					struct file_operations *ops;	//文件操作结构体
					struct list_head list;	
					dev_t dev;				//设备号
					unsigned int count;
				}
			操作cdev的函数
				void cdev_init( struct cdev *, struc t file_operations *);
				struct cdev *cdev_alloc(void);
				int cdev_add(st ruct cdev *, dev_t, unsigned);
				void cdev_del(struct cdev *);

		file_operations 
			根据硬件设备的特点，实现某些函数
			1、应用程序调用fopen打开设备时，内核会将fopen映射到file_operations里面的open函数指针处
			2、主要成员
				owner
				unlocked_ioctl //传递控制参数
				open
				release
				read
				write	被应用程序调用写
			3、用户空间和内核空间的数据拷贝过程
				unsigned long copy_from_user(void *to,  const void __user *from,unsigned long count) ;用户到内核，在write内
				unsigned long copy_to_user(void __user *to,  const void *from,unsigned long count );内核到用户，在read内
				如果要复制的内存是简单类型，如char、int、long 等，
					put_user()和get_user()
		用户程序的调用函数
			write
			open
			read
			ioctl

				
				
	简单的内核调用步骤
		insmod xx.ko
		rm -rf /dev/xx
		mknod /dev/xx c major minor //创建设备节点
		./xx /dev/xx
		rmmod xx.kb
	地址映射
		ioremap
		地址划分
			0-3G user space virtual address
			3G-4G kernel space virtual address
		cpu->mmu->memory
		把物理地址映射为虚拟地址
	设置地址时，先取地址，在原来的地址上&设置值
	ioread32
	iwrite32
	
	
阻塞型
	阻塞型
		
	非阻塞型
	休眠
		安全的进入休眠状态
			(原子上下文--某段不允许中断的代码)
	等待队列
		实现阻塞进程的唤醒
		实现内核中的异步事件通知机制
			队列的数据结构
			系统的调度机制
		同步系统资源的访问
		
	信号量 机制？？？互斥锁
中断
	软中断
	硬中断
	DMA