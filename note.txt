多任务并发---需要搭载操作系统

gcc 编译过程
    1、预处理   -E   xx.i
    2、编译    语法检查   -S   xx.S
    3、汇编    -c   xx.o
    4、链接    -lm(math.h)  xx
    
	
变量存储位置：	
	栈区stack	由编译器自动分配释放，存放函数的参数值，函数的返回地址，局部变量等，#栈区容量有限，不能溢出
	堆区heap	一般由程序员分配释放，比如malloc	//可以返回子函数中malloc分配的空间
	全局区（静态区，数据区，静态数据区，数据段）static 	全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，
							未初始化的全局变量和静态变量存放在另一块相邻的区域，程序结束后由系统释放。
	文字常量区	常量字符串，程序结束后由系统释放。
	程序代码区	存放函数体的二进制代码。
	
/proc
	正在运行的进程编号
	
touch 
	若文件不存在，则新建文件，否则更新时间戳

rm
	使用扩展通配符 
		shopt -s extglob 开启
		shopt -s 查看
	rm -rf * !(hello.c) 删除全部，除了hello.c
	
more 
	分页显示（回车键），只能向下
less
	使用方向键向上或向下
head
	head -10 xx  文件首10行
tail
	tail -5 xx    文件尾部5行
su
	切换用户，默认的参数为root
	
		 UID GID
double:x:500:500::/home/double:/bin/bash               // /etc/passwd
double:x:500:										   // /etc/group
		 GID
		 
adduser 
	-g 加入组 
	默认建立主目录
	
userdel 
	userdel xx [-rf]  删除用户xx[和其主目录]
usermod 
	usermod xx -g root	更改用户所属组

VIM
	命令模式、插入模式、末行模式
	命令模式：

		ctrl + f	向下翻页
		ctrl + b	向上翻页
		ctrl + u  	向上翻半页
		ctrl + d  	向下翻半页
		^ 	行首
		$	行尾
		w 以单词向下跳转
		b 以单词向上跳转
		e 跳转当前光标所在单词的最后一个字母

		1G	首行
		G	末行
		#G	跳转到#行
		J	合并两行
		dd	剪切当前光标行
			dw	剪切当前光标所在单词
		yy	复制
			yw	当前光标所在单词
			y$
			y^
		p	黏贴
		u	撤销 单步
		U	撤销 所有操作
		ctrl + r 相当于ctrl + y
	末行模式：
		i	光标处插入
		o	在当前行下面插入新行，并进入插入模式
		O	在当前行上面插入新行，并进入插入模式
		:set nu
		:set nonu
		:w xx 另存为
		
	打开二进制文件
		vim -b xx
			:%!xxd  十六进制查看
		
C语言
	assert(xx);//条件不满足，程序会异常退出，#include <assert.h>
	
	函数返回指针的几种方法：
		1、在函数内用malloc，由调用者释放
		2、在函数内使用static 定义
		3、由调用者分配空间，只是把指针传给函数，函数内部把数据拷贝到内存中。（推荐）
		
	函数指针
		返回值类型	(*指针变量名)([形参列表])
		
	文件
		fputc(ch,STDOUT);//输出到屏幕 
		
	